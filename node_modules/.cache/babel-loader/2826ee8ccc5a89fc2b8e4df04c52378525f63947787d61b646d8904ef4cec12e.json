{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\n// カスタムしたaxiosをインポート\nimport axios from '../axiou-auth';\nimport router from '../router';\n\n// Vuexをこのプロジェクト全体で使用する宣言\nVue.use(Vuex);\n\n// vuex.storeインスタンスを生成したものを外で使用できるようにし、main.jsで呼ぶ\nexport default new Vuex.Store({\n  // stateでは全てのファイルで使用できるグローバル変数を定義できる\n  // ただし、グローバル変数はどこでも使用できてしまうため、いろんな箇所で値を変更するとバグが生まれやすい\n  // そこで値変更の際はmutationsを使う\n  state: {\n    idToken: null,\n    isAuthLoading: false\n  },\n  // storeから値を取得する時に使用する(gettersを使用しなくてもできるが、使った方がわかりやすい)\n  getters: {\n    // idTokenはrouterで使用している\n    idToken: state => state.idToken,\n    // isAuthLoadingはログインページで使用している\n    isAuthLoading: state => state.isAuthLoading\n  },\n  // stateの値をいじる時は必ずmutationsの中でいじるようにする(値の追跡がしやすい)\n  // mutationsで定義した関数は外で使用可能で、外で呼ぶ時は→this.$store.commit(upDateIdtoken, 2) \n  // 補足として、mutationsは同期処理しか書けない(非同期まで書けてしまうとコードが読みにくくなるため)\n  // 非同期を使用する場合は、actionsを使用する\n  mutations: {\n    upDateIdtoken(state, idToken) {\n      state.idToken = idToken;\n    },\n    upDateIsAuthLoading(state) {\n      state.isAuthLoading = !state.isAuthLoading;\n    }\n  },\n  actions: {\n    // thenではなくasync/awaitを使用\n    // 参考 https://qiita.com/shisama/items/61cdcc09dc69fd8d3127\n    // {commit}はcontextの中で使用したいものだけを記載するやり方(contextと記載するのではなくオブジェクトとしてcommitを記載できる)\n    // この関数では、メアド、パスワードからidトークン値を呼び出して、mutationにコミットする\n    async login({\n      commit\n    }, authData) {\n      // firebaseの認証機構を使用している(事前にユーザを登録しておいた)\n      try {\n        // ロード中画面表示をtrue\n        commit(\"upDateIsAuthLoading\");\n        // postの第二引数の値は以下公式ドキュメントを参考\n        // https://firebase.google.com/docs/reference/rest/auth\n        const response = await axios.post('/accounts:signInWithPassword?key=AIzaSyDgzqZut4dul-eVpjWdNSCeBntGScPVlnM', {\n          email: authData.email,\n          password: authData.password,\n          returnSecureToken: true\n        });\n        // デバッグ表示\n        console.log(response);\n        // レスポンスのidトークン値をmutationsにコミットする\n        commit(\"upDateIdtoken\", response.data.idToken);\n        // ログインに成功したら打刻画面に遷移\n        router.push('/stamp');\n      }\n      // リクエスト失敗した際のエラーをキャッチ\n      catch (error) {\n        // デバッグ表示\n        console.log(error);\n      }\n      // ロード中画面表示をfalseに戻す\n      commit(\"upDateIsAuthLoading\");\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","axios","router","use","Store","state","idToken","isAuthLoading","getters","mutations","upDateIdtoken","upDateIsAuthLoading","actions","login","commit","authData","response","post","email","password","returnSecureToken","console","log","data","push","error"],"sources":["/Users/ikeda/Desktop/vue課題/stamp-app/src/store/index.js"],"sourcesContent":["import Vue from \"vue\"\nimport Vuex from \"vuex\"\n// カスタムしたaxiosをインポート\nimport axios from '../axiou-auth'\nimport router from '../router'\n\n// Vuexをこのプロジェクト全体で使用する宣言\nVue.use(Vuex)\n\n// vuex.storeインスタンスを生成したものを外で使用できるようにし、main.jsで呼ぶ\nexport default new Vuex.Store({\n    // stateでは全てのファイルで使用できるグローバル変数を定義できる\n    // ただし、グローバル変数はどこでも使用できてしまうため、いろんな箇所で値を変更するとバグが生まれやすい\n    // そこで値変更の際はmutationsを使う\n    state: {\n        idToken: null,\n        isAuthLoading: false\n    },\n    // storeから値を取得する時に使用する(gettersを使用しなくてもできるが、使った方がわかりやすい)\n    getters: {\n        // idTokenはrouterで使用している\n        idToken: state => state.idToken,\n        // isAuthLoadingはログインページで使用している\n        isAuthLoading: state => state.isAuthLoading,\n    },\n    // stateの値をいじる時は必ずmutationsの中でいじるようにする(値の追跡がしやすい)\n    // mutationsで定義した関数は外で使用可能で、外で呼ぶ時は→this.$store.commit(upDateIdtoken, 2) \n    // 補足として、mutationsは同期処理しか書けない(非同期まで書けてしまうとコードが読みにくくなるため)\n    // 非同期を使用する場合は、actionsを使用する\n    mutations: {\n        upDateIdtoken(state, idToken){\n            state.idToken = idToken\n        },\n        upDateIsAuthLoading(state){\n            state.isAuthLoading = !state.isAuthLoading\n        }\n    },\n    actions: {\n    // thenではなくasync/awaitを使用\n    // 参考 https://qiita.com/shisama/items/61cdcc09dc69fd8d3127\n    // {commit}はcontextの中で使用したいものだけを記載するやり方(contextと記載するのではなくオブジェクトとしてcommitを記載できる)\n    // この関数では、メアド、パスワードからidトークン値を呼び出して、mutationにコミットする\n    async login({commit}, authData){\n        // firebaseの認証機構を使用している(事前にユーザを登録しておいた)\n        try{\n        // ロード中画面表示をtrue\n          commit(\"upDateIsAuthLoading\")\n          // postの第二引数の値は以下公式ドキュメントを参考\n          // https://firebase.google.com/docs/reference/rest/auth\n          const response = await axios.post('/accounts:signInWithPassword?key=AIzaSyDgzqZut4dul-eVpjWdNSCeBntGScPVlnM',\n        {\n         email: authData.email,\n         password: authData.password,\n         returnSecureToken: true\n        })\n        // デバッグ表示\n        console.log(response)\n        // レスポンスのidトークン値をmutationsにコミットする\n        commit(\"upDateIdtoken\", response.data.idToken)\n        // ログインに成功したら打刻画面に遷移\n        router.push('/stamp')\n        }\n        // リクエスト失敗した際のエラーをキャッチ\n        catch(error){\n            // デバッグ表示\n            console.log(error)\n            }\n        // ロード中画面表示をfalseに戻す\n        commit(\"upDateIsAuthLoading\")\n        }\n    }\n})\n"],"mappings":";AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AACvB;AACA,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,MAAM,MAAM,WAAW;;AAE9B;AACAH,GAAG,CAACI,GAAG,CAACH,IAAI,CAAC;;AAEb;AACA,eAAe,IAAIA,IAAI,CAACI,KAAK,CAAC;EAC1B;EACA;EACA;EACAC,KAAK,EAAE;IACHC,OAAO,EAAE,IAAI;IACbC,aAAa,EAAE;EACnB,CAAC;EACD;EACAC,OAAO,EAAE;IACL;IACAF,OAAO,EAAED,KAAK,IAAIA,KAAK,CAACC,OAAO;IAC/B;IACAC,aAAa,EAAEF,KAAK,IAAIA,KAAK,CAACE;EAClC,CAAC;EACD;EACA;EACA;EACA;EACAE,SAAS,EAAE;IACPC,aAAa,CAACL,KAAK,EAAEC,OAAO,EAAC;MACzBD,KAAK,CAACC,OAAO,GAAGA,OAAO;IAC3B,CAAC;IACDK,mBAAmB,CAACN,KAAK,EAAC;MACtBA,KAAK,CAACE,aAAa,GAAG,CAACF,KAAK,CAACE,aAAa;IAC9C;EACJ,CAAC;EACDK,OAAO,EAAE;IACT;IACA;IACA;IACA;IACA,MAAMC,KAAK,CAAC;MAACC;IAAM,CAAC,EAAEC,QAAQ,EAAC;MAC3B;MACA,IAAG;QACH;QACED,MAAM,CAAC,qBAAqB,CAAC;QAC7B;QACA;QACA,MAAME,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,0EAA0E,EAC9G;UACCC,KAAK,EAAEH,QAAQ,CAACG,KAAK;UACrBC,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ;UAC3BC,iBAAiB,EAAE;QACpB,CAAC,CAAC;QACF;QACAC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;QACrB;QACAF,MAAM,CAAC,eAAe,EAAEE,QAAQ,CAACO,IAAI,CAACjB,OAAO,CAAC;QAC9C;QACAJ,MAAM,CAACsB,IAAI,CAAC,QAAQ,CAAC;MACrB;MACA;MACA,OAAMC,KAAK,EAAC;QACR;QACAJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;MAClB;MACJ;MACAX,MAAM,CAAC,qBAAqB,CAAC;IAC7B;EACJ;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}