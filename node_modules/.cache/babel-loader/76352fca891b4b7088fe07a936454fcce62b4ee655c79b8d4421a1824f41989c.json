{"ast":null,"code":"/* ダイアログ表示用コンポーネント */\nimport StampDialog from '../dialog/StampDialog.vue';\nimport dayjs from 'dayjs';\n/* 標準のdateインスタンスは使うのが面倒なのでdayjsを使用 */\nimport 'dayjs/locale/ja';\nimport axios from 'axios';\nexport default {\n  components: {\n    StampDialog\n  },\n  data() {\n    return {\n      attendanceMark: \"出勤\",\n      leavingMark: \"退勤\",\n      /* ボタンを非活性にするかどうか */\n      isAttendanceDisable: false,\n      isLeavingDisable: false,\n      /* ダイアログを表示するかどうか */\n      isAttendanceDialogView: false,\n      isLeavingDialogView: false,\n      nowDate: \"\",\n      nowYearMonthDay: \"\",\n      nowMonthDateDay: \"\",\n      nowtime: \"\",\n      /* 多分いらない */\n      attendanceHourMinute: \"\",\n      attendanceHour: \"\",\n      attendanceMinute: \"\",\n      leavingHour: \"\",\n      leavingMinute: \"\",\n      leavingHourMinute: \"\"\n    };\n  },\n  mounted() {\n    /* DOMが生成された段階で現在時刻を表示 */\n    this.nowDate = this.fetchNowDate();\n    this.nowYearMonthDay = this.makeYearMonthDayTemplate(this.nowDate);\n    this.nowMonthDateDay = this.makeMonthDateDayTemplate(this.nowDate);\n    this.nowtime = this.makeHourMinuteTemplate(this.nowDate);\n  },\n  computed: {},\n  methods: {\n    /* 時刻取得 */\n    fetchNowDate() {\n      /* 日本語変換 */\n      dayjs.locale('ja');\n      /* インスタンスを返却 */\n      return dayjs();\n    },\n    /* 年月日フォーマット */\n    makeYearMonthDayTemplate() {\n      return this.nowDate.format('YYYY-MM-DD');\n    },\n    /* 月日フォーマット */\n    makeHourMinuteTemplate(nowDate) {\n      return nowDate.format('HH:mm');\n    },\n    /* ○月○日(○)曜日フォーマット */\n    makeMonthDateDayTemplate(nowDate) {\n      return nowDate.format('M月D日(ddd)');\n    },\n    attendanceAtWork() {\n      /* 時刻の取得 */\n      this.attendanceHour = this.fetchNowDate().format(\"HH\");\n      this.attendanceMinute = this.fetchNowDate().format(\"mm\");\n      /* 出勤ダイアログを表示 */\n      this.isAttendanceDialogView = true;\n    },\n    leavingWork() {\n      this.leavingHour = this.fetchNowDate().format(\"HH\");\n      this.leavingMinute = this.fetchNowDate().format(\"mm\");\n      /* 退勤ダイアログを表示 */\n      this.isLeavingDialogView = true;\n    },\n    /* 取消が押下された場合 */\n    cancelAttendanceAtWork() {\n      this.attendanceMark = \"出勤\";\n      this.isAttendanceDisable = false;\n      this.attendanceHourMinute = \"\";\n    },\n    cancelLeavingWork() {\n      this.leavingMark = \"退勤\";\n      this.isLeavingDisable = false;\n      this.leavingHourMinute = \"\";\n    },\n    /* ダイアログで出勤打刻が押下されたら実行 */\n    ApplyForAttendance(applyNowDate, applyNowHour, applyNowMinute, applyPlace, applyReason) {\n      /* firebaseに値を登録する */\n      this.registerApi(this.attendanceMark, applyNowDate, applyNowHour, applyNowMinute, applyPlace, applyReason);\n      /* 済を表示し、ボタンを非活性 */\n      this.attendanceMark = \"出勤済み\";\n      this.isAttendanceDisable = true;\n      /* 子で取得した値を代入 */\n      this.attendanceHourMinute = applyNowHour + \":\" + applyNowMinute;\n      /* ダイアログを閉じる */\n      this.closeAttendanceDialog();\n    },\n    /* ダイアログで退勤打刻が押下されたら実行 */\n    ApplyForLeaving() {\n      /* firebaseに値を登録する */\n      this.registerApi;\n      /* 済を表示し、ボタンを非活性 */\n      this.leavingMark = \"退勤済み\";\n      this.isLeavingDisable = true;\n      /* 時刻を取得し、表示フォーマットを作成 */\n      this.leavingHourMinute = this.makeHourMinuteTemplate(this.fetchNowDate());\n      /* ダイアログを閉じる */\n      this.closeLeavingDialog();\n    },\n    /* 子からの値を受け取ったらダイアログが閉じる */\n    closeAttendanceDialog() {\n      this.isAttendanceDialogView = !this.isAttendanceDialogView;\n    },\n    closeLeavingDialog() {\n      this.isLeavingDialogView = !this.isLeavingDialogView;\n    },\n    /* データをcloudfirestoreに送る\n    出退勤区分(必須)\n    出退勤時刻(必須)\n    打刻場所(必須)\n    申請理由(任意)\n    */\n    async registerApi(applyAttendanceMark, applyNowdate, applyNowHour, applyNowMinute, applyPlace, applyReason) {\n      /* 打刻申請が押された年月日を取得 */\n      const justNowDate = this.makeYearMonthDayTemplate(this.fetchNowDate());\n      /* ダイアログから打刻された日がその日のうちに打刻されてるか確認 */\n      if (!applyNowdate == justNowDate) {\n        alert('1日以上経過しているため再度読み込みしてやり直してください');\n        throw new Error('ダイアログを開いてから1日以上経過しています');\n      }\n      /* 打刻データをfirebaseへ登録 */\n      /* データの送り方はfirestoreのルールに従っている */\n      try {\n        const response = await axios.post('/projects/vuejs-http-4ad1e/databases/(default)/documents/apply-stamp', {\n          fields: {\n            // 出退勤区分\n            workStatus: {\n              stringValue: applyAttendanceMark\n            },\n            // 出退勤年月日\n            applyForDate: {\n              stringValue: applyNowdate\n            },\n            // 出退勤hour\n            applyForHour: {\n              stringValue: applyNowHour\n            },\n            // 出退勤minute\n            applyForMinute: {\n              stringValue: applyNowMinute\n            },\n            // 打刻場所\n            applyPlace: {\n              stringValue: applyPlace\n            },\n            // 申請理由\n            applyReason: {\n              stringValue: applyReason\n            }\n          }\n        });\n        console.log(response);\n      } catch (error) {\n        // デバッグ表示\n        console.log(error);\n        alert(\"申請に失敗しました\");\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAqDA;AACA;AACA;AACA;AACA;AACA;AAGA;EACAA;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACA;MACAC;MACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;IACA;IACA;IACA;IACA;EACA;EACAC,WACA;EACAC;IACA;IACAC;MACA;MACAC;MACA;MACA;IACA;IACA;IACAC;MACA;IACA;IACA;IACAC;MACA;IACA;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA,kEACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;IACA,mEACAH;MACA;MACA;MACA;MACA;QACAI;QACA;MACA;MACA;MACA;MACA;QACA,0GACA;UACAC;YACA;YACAC;cACAC;YACA;YACA;YACAC;cACAD;YACA;YACA;YACAE;cACAF;YACA;YACA;YACAG;cACAH;YACA;YACA;YACAI;cACAJ;YACA;YACA;YACAK;cACAL;YACA;UACA;QACA,EACA;QACAM;MACA,EACA;QACA;QACAA;QACAT;MACA;IACA;EACA;AACA","names":["components","StampDialog","data","attendanceMark","leavingMark","isAttendanceDisable","isLeavingDisable","isAttendanceDialogView","isLeavingDialogView","nowDate","nowYearMonthDay","nowMonthDateDay","nowtime","attendanceHourMinute","attendanceHour","attendanceMinute","leavingHour","leavingMinute","leavingHourMinute","mounted","computed","methods","fetchNowDate","dayjs","makeYearMonthDayTemplate","makeHourMinuteTemplate","makeMonthDateDayTemplate","attendanceAtWork","leavingWork","cancelAttendanceAtWork","cancelLeavingWork","ApplyForAttendance","applyNowMinute","ApplyForLeaving","closeAttendanceDialog","closeLeavingDialog","alert","fields","workStatus","stringValue","applyForDate","applyForHour","applyForMinute","applyPlace","applyReason","console"],"sourceRoot":"src/components/pages","sources":["StampPage.vue"],"sourcesContent":["<template>\n    <div class=\"stamp\">\n        <!-- ダイアログ表示中は非表示 -->\n        <div class=\"stamp-view\" v-show=\"!isAttendanceDialogView || isLeavingDialogView\">\n            <div class=\"date\">\n                <p class=\"now-date\">\n                    {{ nowMonthDateDay }}\n                </p>\n                <p class=\"now-time\">\n                    {{ nowtime }}\n                </p>\n            </div>\n            <!-- 出退勤ボタンをクリックしたら非活性にする -->\n            <button @click=\"attendanceAtWork\" :disabled=\"isAttendanceDisable\">\n                {{ attendanceMark }}\n            </button>\n            <br>\n            <!-- attendanceHourMinuteに値があれば時刻を表示 -->\n            <div v-show=\"!attendanceHourMinute\">\n                未\n            </div>\n            <div v-show=\"attendanceHourMinute\">\n                {{ attendanceHourMinute }}\n                <!-- 取り消しボタン(bootstrap) -->\n                <button type=\"button\" class=\"btn btn-link\" @click=\"cancelAttendanceAtWork\">[取消]</button>\n            </div>\n            <button @click=\"leavingWork\" :disabled=\"isLeavingDisable\">{{ leavingMark }}</button>\n            <div v-show=\"!leavingHourMinute\">\n                未\n            </div>\n            <br>\n            <div v-show=\"leavingHourMinute\">\n                {{ leavingHourMinute }}\n                <button type=\"button\" class=\"btn btn-link\" @click=\"cancelLeavingWork\">[取消]</button>\n            </div>\n        </div>\n        <!-- 打刻が押されたらダイアログを表示 -->\n        <div class=\"dialog-view\" v-show=\"isAttendanceDialogView\">\n            <!-- v-bindで値を子に渡し、カスタムイベントで子からの値を受け取る -->\n            <!-- dataから動的に値を使う時はv-bind -->\n            <StampDialog :work-status=\"attendanceMark\" \n            :now-date=\"nowYearMonthDay\" :now-hour=\"attendanceHour\" :now-minute=\"attendanceMinute\"\n            @apply-for-attendance=\"ApplyForAttendance\" @close-attendance-dialog=\"closeAttendanceDialog\"></StampDialog>\n        </div>\n        <div class=\"dialog-view\" v-show=\"isLeavingDialogView\">\n            <StampDialog :work-status=\"leavingMark\"\n            :now-date=\"nowYearMonthDay\" :now-hour=\"leavingHour\" :now-minute=\"leavingMinute\"\n             @apply-for-leaving=\"ApplyForLeaving\" @close-leaving-dialog=\"closeLeavingDialog\"></StampDialog>\n        </div>\n    </div>\n</template>\n    \n<script>\n/* ダイアログ表示用コンポーネント */\nimport StampDialog from '../dialog/StampDialog.vue';\nimport dayjs from 'dayjs';\n/* 標準のdateインスタンスは使うのが面倒なのでdayjsを使用 */\nimport 'dayjs/locale/ja';\nimport axios from 'axios'\n\n\nexport default{\n    components: {\n        StampDialog\n    },\n    data() {\n        return{\n            attendanceMark: \"出勤\",\n            leavingMark: \"退勤\",\n            /* ボタンを非活性にするかどうか */\n            isAttendanceDisable: false,\n            isLeavingDisable: false,\n            /* ダイアログを表示するかどうか */\n            isAttendanceDialogView: false,\n            isLeavingDialogView: false,\n            nowDate: \"\",\n            nowYearMonthDay: \"\",\n            nowMonthDateDay: \"\",\n            nowtime:\"\",\n            /* 多分いらない */\n            attendanceHourMinute: \"\",\n            attendanceHour: \"\",\n            attendanceMinute: \"\",\n            leavingHour: \"\",\n            leavingMinute: \"\",\n            leavingHourMinute:\"\"\n        }\n    },\n    mounted() {\n        /* DOMが生成された段階で現在時刻を表示 */\n        this.nowDate = this.fetchNowDate()\n        this.nowYearMonthDay = this.makeYearMonthDayTemplate(this.nowDate)\n        this.nowMonthDateDay = this.makeMonthDateDayTemplate(this.nowDate)\n        this.nowtime = this.makeHourMinuteTemplate(this.nowDate)\n    },\n    computed: {\n    },\n    methods: {\n        /* 時刻取得 */\n        fetchNowDate(){\n            /* 日本語変換 */\n            dayjs.locale('ja');\n            /* インスタンスを返却 */\n            return dayjs()\n        },\n        /* 年月日フォーマット */\n        makeYearMonthDayTemplate(){\n          return this.nowDate.format('YYYY-MM-DD')\n        },\n        /* 月日フォーマット */\n        makeHourMinuteTemplate(nowDate){\n            return nowDate.format('HH:mm')\n        },\n        /* ○月○日(○)曜日フォーマット */\n        makeMonthDateDayTemplate(nowDate){\n            return nowDate.format('M月D日(ddd)')\n        },\n        attendanceAtWork(){\n            /* 時刻の取得 */\n            this.attendanceHour = this.fetchNowDate().format(\"HH\")\n            this.attendanceMinute = this.fetchNowDate().format(\"mm\")\n            /* 出勤ダイアログを表示 */\n            this.isAttendanceDialogView = true\n        },\n        leavingWork(){\n            this.leavingHour = this.fetchNowDate().format(\"HH\")\n            this.leavingMinute = this.fetchNowDate().format(\"mm\")\n            /* 退勤ダイアログを表示 */\n            this.isLeavingDialogView = true\n        },\n        /* 取消が押下された場合 */\n        cancelAttendanceAtWork(){\n            this.attendanceMark = \"出勤\"\n            this.isAttendanceDisable = false\n            this.attendanceHourMinute = \"\"\n        },\n        cancelLeavingWork(){\n            this.leavingMark = \"退勤\"\n            this.isLeavingDisable = false\n            this.leavingHourMinute = \"\"\n        },\n        /* ダイアログで出勤打刻が押下されたら実行 */\n        ApplyForAttendance(applyNowDate, applyNowHour, applyNowMinute, applyPlace, applyReason){\n            /* firebaseに値を登録する */\n            this.registerApi(this.attendanceMark, applyNowDate, applyNowHour,\n                             applyNowMinute, applyPlace, applyReason)\n            /* 済を表示し、ボタンを非活性 */\n            this.attendanceMark = \"出勤済み\"\n            this.isAttendanceDisable = true\n            /* 子で取得した値を代入 */\n            this.attendanceHourMinute = applyNowHour + \":\" + applyNowMinute\n            /* ダイアログを閉じる */\n            this.closeAttendanceDialog()\n        },\n        /* ダイアログで退勤打刻が押下されたら実行 */\n        ApplyForLeaving(){\n            /* firebaseに値を登録する */\n            this.registerApi\n            /* 済を表示し、ボタンを非活性 */\n            this.leavingMark = \"退勤済み\"\n            this.isLeavingDisable = true\n            /* 時刻を取得し、表示フォーマットを作成 */\n            this.leavingHourMinute = this.makeHourMinuteTemplate(this.fetchNowDate())\n            /* ダイアログを閉じる */\n            this.closeLeavingDialog()\n        },\n        /* 子からの値を受け取ったらダイアログが閉じる */\n        closeAttendanceDialog(){\n            this.isAttendanceDialogView = !this.isAttendanceDialogView\n        },\n        closeLeavingDialog(){\n            this.isLeavingDialogView = !this.isLeavingDialogView\n        },\n        /* データをcloudfirestoreに送る\n        出退勤区分(必須)\n        出退勤時刻(必須)\n        打刻場所(必須)\n        申請理由(任意)\n        */\n       async registerApi(applyAttendanceMark, applyNowdate, applyNowHour,\n       applyNowMinute, applyPlace, applyReason){\n           /* 打刻申請が押された年月日を取得 */\n           const justNowDate = this.makeYearMonthDayTemplate(this.fetchNowDate())\n           /* ダイアログから打刻された日がその日のうちに打刻されてるか確認 */\n           if (!applyNowdate == justNowDate){\n                alert('1日以上経過しているため再度読み込みしてやり直してください')\n                throw new Error('ダイアログを開いてから1日以上経過しています')\n            }\n           /* 打刻データをfirebaseへ登録 */\n           /* データの送り方はfirestoreのルールに従っている */\n           try{\n               const response = await axios.post('/projects/vuejs-http-4ad1e/databases/(default)/documents/apply-stamp',\n               {\n                   fields: {\n                    // 出退勤区分\n                    workStatus: {\n                    stringValue: applyAttendanceMark\n                    },\n                    // 出退勤年月日\n                    applyForDate: {\n                    stringValue: applyNowdate\n                        },\n                    // 出退勤hour\n                    applyForHour: {\n                    stringValue: applyNowHour\n                        },\n                    // 出退勤minute\n                    applyForMinute: {\n                    stringValue: applyNowMinute\n                        },\n                    // 打刻場所\n                    applyPlace: {\n                    stringValue: applyPlace\n                        },\n                    // 申請理由\n                    applyReason: {\n                    stringValue: applyReason\n                        },\n                   }\n               }\n               )\n               console.log(response)\n           }\n            catch(error){\n            // デバッグ表示\n            console.log(error)\n            alert(\"申請に失敗しました\")\n           }\n           },       \n        }\n    }\n</script>\n    \n<style scoped>\n\n</style>\n    "]},"metadata":{},"sourceType":"module","externalDependencies":[]}