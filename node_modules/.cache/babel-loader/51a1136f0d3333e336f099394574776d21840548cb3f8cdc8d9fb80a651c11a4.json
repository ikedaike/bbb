{"ast":null,"code":"export default {\n  /* stampPage(親)から値を受け取る */\n  props: {\n    workStatus: {\n      type: String\n    },\n    nowDate: {},\n    nowHour: {},\n    nowMinute: {}\n  },\n  data() {\n    return {\n      ApplyNowDate: \"\",\n      ApplyNowHour: \"\",\n      ApplyNowMinute: \"\",\n      ApplyPlace: \"\",\n      ApplyReason: \"\"\n    };\n  },\n  updated() {\n    /* propsで受け取った値をApplyNowHourに入れることでv-modelの使用を実現している\n    ・選択肢での入力も値として反映させるため */\n    this.ApplyNowHour = this.nowHour;\n  },\n  methods: {\n    /* 閉じるボタンが押下されたら、親の関数を実行する(ここで値を返す必要なないと考えたため) */\n    /* 出勤時は出勤の処理、退勤時は退勤の処理を親に通達する */\n    closeDialog(workStatus) {\n      if (workStatus == \"出勤\") {\n        this.closeAttendanceDialog();\n      } else if (workStatus == \"退勤\") {\n        this.closeLeavingDialog();\n      } else {\n        console.log(\"error:出退勤区分が異常です\");\n      }\n    },\n    closeAttendanceDialog() {\n      this.$emit('close-attendance-dialog');\n    },\n    closeLeavingDialog() {\n      this.$emit('close-leaving-dialog');\n    },\n    /* 申請ボタンが押下されたら、親の関数を実行する */\n    ApplyForStamp(workStatus) {\n      if (workStatus == \"出勤\") {\n        this.ApplyForAttendance();\n      } else if (workStatus == \"退勤\") {\n        this.ApplyForLeaving();\n      } else {\n        console.log(\"error:出退勤区分が異常です\");\n      }\n    },\n    ApplyForAttendance() {\n      this.$emit('apply-for-attendance', this.ApplyNowHour, this.ApplyNowMinute);\n    },\n    ApplyForLeaving() {\n      this.$emit('apply-for-leaving');\n    }\n  }\n};","map":{"version":3,"mappings":"AAsEA;EACA;EACAA;IACAC;MACAC;IACA;IACAC,UACA;IACAC,UACA;IACAC,YACA;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;AACA;IACA;EACA;EACAC;IACA;IACA;IACAC;MACA;QACA;MACA;QACA;MACA;QACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACA;IACAC;MACA;QACA;MACA;QACA;MACA;QACAH;MACA;IACA;IACAI;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["props","workStatus","type","nowDate","nowHour","nowMinute","data","ApplyNowDate","ApplyNowHour","ApplyNowMinute","ApplyPlace","ApplyReason","updated","methods","closeDialog","console","closeAttendanceDialog","closeLeavingDialog","ApplyForStamp","ApplyForAttendance","ApplyForLeaving"],"sourceRoot":"src/components/dialog","sources":["StampDialog.vue"],"sourcesContent":["<template>\n    <div class=\"stamp-dialog\">\n        <!-- bootstrap使用 -->\n        <div id=\"overlay\">\n            <div id=\"content\">\n              <h2>出退勤打刻申請</h2>\n              <table>\n                <tr>\n                  <th>対象日：</th>\n                  <td>{{ nowDate }}</td>\n                </tr>\n                <tr>\n                  <th>出退勤区分：</th>\n                  <td>{{ workStatus }}</td>\n                </tr>\n                <tr>\n                  <th>時刻：</th>\n                  <td>\n                    <!-- nobrで改行させないようにしている -->\n                  <nobr>\n                    <!-- propsから受け取った時刻を初期値に選択肢で選択された値も反映できるように\n                      双方向バインドしている -->\n                      <input class=\"hour-minute\" v-model=\"ApplyNowHour\" type=\"text\" list=\"hour\" autocomplete=\"off\">\n                      <datalist id=\"hour\">\n                        <div v-for=\"hour in 24\" :key=\"hour\">\n                          <option>{{ hour }}</option>\n                        </div>\n                      </datalist>\n                      :\n                      <input class=\"hour-minute\" v-model=\"ApplyNowMinute\" type=\"text\" list=\"minute\" autocomplete=\"off\">\n                      <datalist id=\"minute\">\n                        <div v-for=\"minute in 59\" :key=\"minute\">\n                          <option>{{ minute }}</option>\n                        </div>\n                      </datalist>\n                  </nobr>\n                  </td>\n                </tr>\n                <tr>\n                  <th>打刻場所：</th>\n                  <td>\n                    <!-- 選択肢とテキスト入力両方できるようにする -->\n                  <input type=\"text\" list=\"stamp-place\" placeholder=\"選択してください\" autocomplete=\"off\">\n                  <datalist id=\"stamp-place\">\n                    <option value=\"自宅\"></option>\n                    <option value=\"東京本社\"></option>\n                    <option value=\"大阪第第二分室\"></option>\n                  </datalist>\n                </td>\n              </tr>\n              <tr>\n                <th>申請理由：</th>\n                <input type=\"text\" list=\"reason-for-application\" placeholder=\"選択してください\" autocomplete=\"off\">\n                <datalist id=\"reason-for-application\">\n                  <option value=\"打刻忘れのため\"></option>\n                </datalist>\n                  <td>\n                  </td>\n                </tr>\n              </table>\n                <p>\n                  <button @click=\"ApplyForStamp(workStatus)\">申請</button>\n                  <button @click=\"closeDialog(workStatus)\">閉じる</button>\n                </p>\n            </div>\n        </div>\n    </div>\n</template>\n    \n<script>\n    export default{\n      /* stampPage(親)から値を受け取る */\n      props:{\n        workStatus:{\n          type: String\n        },\n        nowDate: {\n        },\n        nowHour: {\n        },\n        nowMinute:{\n        },\n      },\n      data() {\n        return{\n          ApplyNowDate: \"\",\n          ApplyNowHour: \"\",\n          ApplyNowMinute: \"\",\n          ApplyPlace: \"\",\n          ApplyReason: \"\",\n        }\n      },\n      updated() {\n        /* propsで受け取った値をApplyNowHourに入れることでv-modelの使用を実現している\n       ・選択肢での入力も値として反映させるため */\n        this.ApplyNowHour = this.nowHour\n      },\n      methods: {\n        /* 閉じるボタンが押下されたら、親の関数を実行する(ここで値を返す必要なないと考えたため) */\n        /* 出勤時は出勤の処理、退勤時は退勤の処理を親に通達する */\n        closeDialog(workStatus){\n          if(workStatus == \"出勤\"){\n            this.closeAttendanceDialog()\n          }else if( workStatus == \"退勤\"){\n            this.closeLeavingDialog()\n          }else{\n            console.log(\"error:出退勤区分が異常です\")\n          }\n        },\n        closeAttendanceDialog(){\n          this.$emit('close-attendance-dialog')\n        },\n        closeLeavingDialog(){\n          this.$emit('close-leaving-dialog')\n        },\n        /* 申請ボタンが押下されたら、親の関数を実行する */\n        ApplyForStamp(workStatus){\n          if(workStatus == \"出勤\"){\n            this.ApplyForAttendance()\n          }else if( workStatus == \"退勤\"){\n            this.ApplyForLeaving()\n          }else{\n            console.log(\"error:出退勤区分が異常です\")\n          }\n        },\n        ApplyForAttendance(){\n          this.$emit('apply-for-attendance', this.ApplyNowHour, this.ApplyNowMinute)\n        },\n        ApplyForLeaving(){\n          this.$emit('apply-for-leaving')\n        }\n      }\n    }\n</script>\n    \n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n/* 背景のグレーアウト */\n#overlay{\n  z-index:1;\n\n  position:fixed;\n  top:0;\n  left:0;\n  width:100%;\n  height:100%;\n  background-color:rgba(0,0,0,0.5);\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n}\n/* ダイアログの設定 */\n#content{\n  z-index:2;\n  width:50%;\n  padding: 1em;\n  background:#fff;\n}\n/* 時刻の選択肢は大きさを調節 */\n.hour-minute{\n width: 50px;\n}\n</style>\n    "]},"metadata":{},"sourceType":"module","externalDependencies":[]}